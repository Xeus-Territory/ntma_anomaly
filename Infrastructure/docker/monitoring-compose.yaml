version: '3'

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}

services:
  prometheus:
    image: prom/prometheus:v2.37.6
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
    container_name: prometheus
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:9090
      interval: 30s
      timeout: 10s
      retries: 5
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - prometheus_data:/prometheus
      - ./conf/monitoring/prometheus/:/etc/prometheus/
    ports:
      - 9090:9090
    # user: '0'
    labels:
      org.label-schema.group: "monitoring"
  
  alertmanager:
    image: prom/alertmanager:v0.25.0
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
    container_name: alert-manager
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:9093
      interval: 30s
      timeout: 10s
      retries: 5
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093
    volumes:
      - alertmanager_data:/alertmanager
      - ./conf/monitoring/alertmanager/:/etc/alertmanager/
    depends_on:
      - prometheus
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:9.4.3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
    container_name: grafana
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:3000
      interval: 30s
      timeout: 10s
      retries: 5

    ports:
      - 3000:3000
    # user: '0'
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./conf/monitoring/grafana/provisioning:/etc/grafana/provisioning
    labels:
      org.label-schema.group: "monitoring"

  # node_exporter:
  #   image: prom/node-exporter:v1.5.0
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         memory: 500M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 100M
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   healthcheck:
  #     test: wget --quiet --tries=1 --spider http://localhost:9100
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   ports:
  #     - 9100:9100
  #   labels:
  #     org.label-schema.group: "monitoring"
    
  # cadvisor:
  #   image: gcr.io/google-containers/cadvisor:v0.36.0
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         memory: 500M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 100M
  #   container_name: cadvisor
  #   restart: unless-stopped
  #   healthcheck:
  #     test: wget --quiet --tries=1 --spider http://localhost:8080/containers/
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   ports:
  #   - 8080:8080
  #   labels:
  #     org.label-schema.group: "monitoring"
    